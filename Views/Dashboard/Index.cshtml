@using Aetherium.Enums
@using Aetherium.Helpers
@using Aetherium.Models.ViewModels
@using Aetherium.Services
@inject UserService _userService
@model DashboardViewModel
@{
    Layout = "~/Views/Shared/_DashboardLayout.cshtml";
}
@{
    bool isLoggedIn = _userService != null;
}

<div class="row vh-100">

    <div class="row">
        <div class="vh-100 col-12" id="dashboardMain">
            <div class="row py-2 mb-2">
                <h4>Welcome back, @Model.CurrentCharacter.DisplayName!</h4>
            </div>
            <hr style="background-color: #00ADB5; height: 3px; border: none; border-radius: 5px;" />
            <div class="row mt-2 justify-content-around">
                <div class="col-md-2 vh-100" id="leftDashboardCol">
                    <div id="characterSwap" class="shadow p-2 mb-3">
                        <div class="dashboard-avatar-wrapper">
                            <img class="dashboard-avatar" src="@Model.CurrentCharacter.AvatarUrl" />
                            @if (isLoggedIn)
                            {
                                <span class="online-dot"></span>
                            }
                        </div>
                        <div class="text-center">
                            <p class="mb-0">@Model.CurrentCharacter.DisplayName</p>
                            <p class="small mb-0 text-muted">Swap Characters</p>
                        </div>
                        <div>
                            <div id="swapArrows">
                                <i class="fa-solid fa-arrows-up-down"></i>
                            </div>
                        </div>
                    </div>
                    
                    <div id="dashboardNav" class="shadow p-2 fullWidth">
                        <ul class="list-unstyled mb-0">
                            <li>
                                <div class="d-flex justify-content-between align-items-center dashNavProfile p-2 pointerCursor">
                                    <div>
                                        <i class="fa-solid fa-user me-2 fixed-icon"></i>
                                        Profile
                                    </div>
                                </div>
                            </li>
                            <li>
                                <div class="d-flex justify-content-between align-items-center dashNavRequests p-2 pointerCursor">
                                    <div>
                                        <i class="fa-solid fa-users me-2 fixed-icon"></i>
                                        Friends
                                    </div>
                                    <div id="requestCount" class="text-center navCounter">
                                        0
                                    </div>
                                </div>
                            </li>
                            <li>
                                <div class="d-flex justify-content-between align-items-center dashNavRequests p-2 pointerCursor">
                                    <div>
                                        <i class="fa-solid fa-user-plus me-2 fixed-icon"></i>
                                        Friend Requests
                                    </div>
                                    <div id="requestCount" class="text-center navCounter">
                                        0
                                    </div>
                                </div>
                            </li>
                            <li>
                                <div class="d-flex justify-content-between align-items-center dashNavRequests p-2 pointerCursor">
                                    <div>
                                        <i class="fa-solid fa-heart me-2 fixed-icon"></i>
                                        Relationships
                                    </div>
                                    <div id="requestCount" class="text-center navCounter">
                                        0
                                    </div>
                                </div>
                            </li>
                            <li>
                                <div class="d-flex justify-content-between align-items-center dashNavRequests p-2 pointerCursor">
                                    <div>
                                        <i class="fa-solid fa-message me-2 fixed-icon"></i>
                                        Unread Messages
                                    </div>
                                    <div id="requestCount" class="text-center navCounter">
                                        0
                                    </div>
                                </div>
                            </li>
                            <li>
                                <div class="d-flex justify-content-between align-items-center dashNavRequests p-2 pointerCursor">
                                    <div>
                                        <i class="fa-solid fa-satellite-dish me-2 fixed-icon"></i>
                                        Following
                                    </div>
                                    <div id="requestCount" class="text-center navCounter">
                                        0
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>

                <div class="col-md-7 vh-100" id="mainDashboardCol">
                    <div style="background-color: #eee; border-radius: 8px; color: black;" class="shadow p-2 mb-2">
                        Width test for middle column
                        <ul>
                            <li>Status feed (includes friends and self)</li>
                            <li>Support for text, image, or YouTube embeds</li>
                        </ul>
                    </div>
                    <div id="statusPostApp" class="shadow p-2" style="background-color: #eee; border-radius: 8px;">
                        @if (TempData["StatusError"] != null)
                        {
                            <div class="alert alert-danger">@TempData["StatusError"]</div>
                        }

                        <form method="post" asp-controller="Dashboard" asp-action="CreateStatus">
                            @Html.AntiForgeryToken()
                            <status-post-editor></status-post-editor>
                            <div class="row mt-2 mb-2">
                                <div class="col-6">
                                    <label>Who can see this?</label>
                                    <select name="PrivacyLevel" class="form-select mb-2">
                                        @foreach (var (value, display) in EnumExtensions.GetEnumDisplayValues<PostPrivacyLevelEnum>())
                                        {
                                            <option value="@value">@display</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-6">
                                    <div id="relationshipTypeSelect" style="display:none;">
                                        <label>Select Relationship:</label>
                                        <select name="AllowedRelationshipType" class="form-select mb-2">
                                            @foreach (var (value, display) in EnumExtensions.GetEnumDisplayValues<RelationshipTypeEnum>())
                                            {
                                                <option value="@value">@display</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                            </div>
                            
                            <button type="submit" class="btn btn-primary mt-2">Post</button>
                        </form>
                    </div>
                    <div id="timeline">

                    </div>
                </div>

                <div class="col-md-3 vh-100 ">
                    <div style="background-color: #eee; border-radius: 8px; color: black; height: 50vh;" class="shadow p-1">
                        Width test for right column
                        <ul>
                            <li>  Site-wide chat box (coming later)</li>
                        </ul>
                    </div>
                </div>
            </div>            
        </div>
    </div>
</div>
<script>
    window.onload = function () {
        const privacySelect = document.querySelector('[name="PrivacyLevel"]');
        const relationshipSelect = document.getElementById('relationshipTypeSelect');

        if (privacySelect && relationshipSelect) {
            // Set initial state
            relationshipSelect.style.display = (privacySelect.value === "3") ? "block" : "none";

            // Listen for changes
            privacySelect.addEventListener('change', function () {
                relationshipSelect.style.display = (this.value === "3") ? "block" : "none";
            });
        }
    };
</script>
@section Scripts {
    <script>
        const { createApp, ref, onMounted } = Vue;

        const StatusPostEditor = {
            template: `
                <div>
                    <div ref="editor" style="height: 100px;"></div>
                    <input type="hidden" name="PostContent" :value="content" />
                </div>
            `,
            setup() {
                const editor = ref(null);
                const content = ref('');

                onMounted(() => {
                    const quill = new Quill(editor.value, {
                        theme: 'snow',
                        placeholder: "What's on your mind?",
                        modules: {
                            toolbar: {
                                container: [
                                    [{ header: [1, 2, false] }],
                                    ['bold', 'italic', 'underline', 'link'],
                                    ['image']
                                ],
                                handlers: {
                                    image: function () {
                                        const input = document.createElement('input');
                                        input.setAttribute('type', 'file');
                                        input.setAttribute('accept', 'image/*');
                                        input.click();

                                        input.onchange = async () => {
                                            const file = input.files[0];
                                            const formData = new FormData();
                                            formData.append('image', file);

                                            const response = await fetch('/api/upload/image', {
                                                method: 'POST',
                                                body: formData
                                            });

                                            const result = await response.json();
                                            if (result.imageUrl) {
                                                const range = quill.getSelection();
                                                quill.insertEmbed(range.index, 'image', result.imageUrl);
                                            }
                                        };
                                    }
                                }
                            }
                        }
                    });

                    quill.on('text-change', () => {
                        content.value = quill.root.innerHTML;
                    });
                    editor.value.addEventListener('click', () => {
                        quill.focus();
                    });
                });

                return { editor, content };
            }
        };

        createApp({
            components: {
                StatusPostEditor
            }
        }).mount('#statusPostApp');
    </script>
}
@* 
@foreach (var character in Model)
{
    <div class="col-md-4 mb-4">
        <div class="card shadow" style="background-color: #393E46; color: #eee;">
            <img src="@character.AvatarUrl" class="card-img-top" alt="@character.DisplayName" style="height: 200px; object-fit: cover;" />
            <div class="card-body">
                <h5 class="card-title">@character.DisplayName</h5>
                <p class="card-text">Created: @character.CreatedOn.ToShortDateString()</p>
            </div>
        </div>
    </div>
} 
*@