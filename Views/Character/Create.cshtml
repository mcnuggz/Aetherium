@using Aetherium.Enums
@using Aetherium.Helpers
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@{
    ViewData["Title"] = "Aetherium - Create Character";
}

<div id="characterApp" class="container mt-5">
    <div class="card p-4 shadow" id="characterCreateDiv">
        <h2 class="header-title mb-3 pb-1">Create Your Character</h2>
        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                {
                    <div><i class="fas fa-exclamation-circle"></i> @error.ErrorMessage</div>
                }
            </div>
        }

        <!-- Avatar Cropper Modal -->
        <div class="modal fade" id="avatarCropModal" tabindex="-1" aria-labelledby="avatarCropModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content bg-dark text-light">
                    <div class="modal-header border-0">
                        <h5 class="modal-title">Edit Avatar</h5>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body text-center">
                        <div class="crop-preview-container position-relative mb-3">
                            <img ref="image" :src="preview" class="img-fluid rounded shadow" />
                            <div class="crop-circle-overlay"></div>
                        </div>
                        <label>Zoom</label>
                        <input type="range" min="0.5" max="3" step="0.01" v-model="zoomLevel" class="form-range" />
                        <div class="mt-3 d-flex justify-content-center gap-3">
                            <button type="button" class="btn btn-outline-secondary" @@click="resetCrop">Reset</button>
                            <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @@click="applyCrop">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <form action="/Character/Create" method="post" enctype="multipart/form-data" @@submit="validateBeforeSubmit">
            <div class="profile-header position-relative mb-5">
                <div class="banner-container position-relative bg-secondary-subtle d-flex align-items-center justify-content-center shadow" style="height: 200px;">
                    <span id="bannerPlaceholder">No banner selected</span>

                    <img id="bannerPreview" class="w-100 banner-img position-absolute d-none"
                         @@mousedown="startDrag" @@mouseup="stopDrag" @@mouseleave="stopDrag" @@mousemove="dragBanner"
                         :style="{ top: bannerOffsetY + 'px', position: 'absolute' }" />

                    <label class="upload-btn banner-upload">
                        <i class="fa fa-camera" style="margin-right: 0;"></i>
                        <input type="file" name="BannerFile" accept="image/*" class="d-none" @@change="onBannerChange" />
                    </label>
                </div>
                <input type="hidden" name="BannerOffsetY" :value="bannerOffsetY" />
            </div>
            <div class="avatar-container position-relative bg-secondary-subtle d-flex">
                <div class="avatar-wrapper position-absolute translate-middle-x">
                    <img id="avatarPreview" class="rounded-circle avatar-img d-none" />

                    <label class="upload-btn avatar-upload">
                        <i class="fa fa-camera"></i>
                        <input type="file" id="avatarInput" accept="image/*" class="d-none" @@change="onAvatarChange" />
                    </label>
                </div>
                <input type="hidden" name="CroppedAvatarBase64" :value="croppedAvatar" />
            </div>

            <div class="row">
                <div class="col-md-6 mb-3"><label>First Name</label><input class="form-control" name="FirstName" v-model="firstName" /></div>
                <div class="col-md-6 mb-3"><label>Last Name</label><input class="form-control" name="LastName" v-model="lastName" /></div>
                <div class="col-md-6 mb-3"><label>Display Name</label><input class="form-control" name="DisplayName" v-model="displayName"/></div>

                <div class="col-md-6 mb-3">
                    <label>Custom URL</label>
                    <input class="form-control" name="CustomUrl" v-model="customUrl" placeholder="e.g. raven-the-witch" />
                    <div class="form-text">Preview: <span id="customUrlPreview">aetherium.com/<em>{{ slugPreview }}</em></span></div>
                </div>
                <hr />
                <div class="col-md-6 mb-3">
                    <label>Orientation</label>
                    <select class="form-select" name="CharacterOrientation" v-model="characterOrientation">
                        <option value="-1">Select One...</option>
                        @foreach (var (value, display) in EnumExtensions.GetEnumDisplayValues<OrientationEnum>())
                        {
                            <option value="@value">@display</option>
                        }
                    </select>
                </div>
                <div class="col-md-6 mb-3">
                    <label>Gender</label>
                    <select class="form-select" name="CharacterGender" v-model="characterGender">
                        <option value="-1">Select One...</option>
                        @foreach(var (value, display) in EnumExtensions.GetEnumDisplayValues<GenderEnum>())
                        {
                            <option value="@value">@display</option>
                        }

                    </select>
                </div>
                <div class="col-md-6 mb-3"><label>Pronouns</label><input class="form-control" name="Pronouns" v-model="pronouns" /></div>
                <div class="col-md-6 mb-3"><label>Species</label><input class="form-control" name="Species" v-model="species" /></div>
                <div class="col-md-6 mb-3"><label>Verse</label><input class="form-control" name="Verse" v-model="verse" /></div>
                <div class="col-md-6 mb-3"><label>Occupation</label><input class="form-control" name="Occupation" v-model="occupation" /></div>
            </div>
            <hr />
            <div class="mb-3">
                <label class="pb-1">Character Bio (max. 10,000 characters)</label>
                <div id="bioEditor"></div>
                <div class="text-end small mt-1"><span id="bioCharCount">0</span> / 10,000 characters</div>
                <input type="hidden" name="CharacterBio" :value="characterBio" />
            </div>

            <button type="submit" class="btn btn-primary">Create Character</button>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        const { createApp, ref, onMounted, nextTick } = Vue;

        createApp({
            setup() {
                const firstName = ref('');
                const lastName = ref('');
                const displayName = ref('');
                const pronouns = ref('');
                const species = ref('');
                const verse = ref('');
                const occupation = ref('');
                const characterGender = ref(0);
                const characterOrientation = ref(0);
                const customUrl = ref('');
                const characterBio = ref('');

                const avatarPreview = ref('');
                const croppedAvatar = ref('');
                let cropper = null;

                const bannerPreview = ref('');
                const bannerOffsetY = ref(0);
                const isDragging = ref(false);
                const dragStartY = ref(0);

                onMounted(() => {
                    const quill = new Quill('#bioEditor', { theme: 'snow' });

                    quill.on('text-change', function () {
                        characterBio.value = quill.root.innerHTML;
                        
                        const text = quill.getText().trim();
                        const countEl = $('#bioCharCount');
                        const length = text.length;

                        $countEl.text(length);
                        $countEl
                            .toggleClass('text-danger', length > 10000)
                            .toggleClass('text-warning', length > 9500 && length <= 10000);

                        $('#errorAlert').fadeOut('fast');
                    });

                    $('#bioEditor').on('click', function () {
                        quill.focus();
                    });
                });

                const slugPreview = Vue.computed(() => {
                    return customUrl.value.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '');
                });

                function onAvatarChange(event) {
                    const file = event.target.files[0];
                    if (!file) return;

                    const reader = new FileReader();
                    reader.onload = () => {
                        avatarPreview.value = reader.result;
                        nextTick(() => {
                            const image = document.getElementById('avatarPreview');
                            if (cropper) cropper.destroy();
                            cropper = new Cropper(image, {
                                aspectRatio: 1,
                                viewMode: 1,
                                autoCropArea: 1,
                                crop() {
                                    const canvas = cropper.getCroppedCanvas({ width: 400, height: 400 });
                                    croppedAvatar.value = canvas.toDataURL('image/png');
                                    document.querySelector('input[name="CroppedAvatarBase64"]').value = croppedAvatar.value;
                                }
                            });
                        });
                    };
                    reader.readAsDataURL(file);
                }

                function onBannerChange(event) {
                    const file = event.target.files[0];
                    if (!file) return;

                    const reader = new FileReader();
                    reader.onload = function () {
                        bannerPreview.value = reader.result;
                        bannerOffsetY.value = 0;

                        document.getElementById('bannerPlaceholder')?.classList.add('d-none');
                        const bannerImg = document.getElementById('bannerPreview');
                        bannerImg.src = bannerPreview.value;
                        bannerImg.classList.remove('d-none');
                    };
                    reader.readAsDataURL(file);
                }

                function startDrag(event) {
                    isDragging.value = true;
                    dragStartY.value = event.clientY;
                }

                function dragBanner(event) {
                    if (!isDragging.value) return;
                    const delta = event.clientY - dragStartY.value;
                    bannerOffsetY.value += delta;
                    dragStartY.value = event.clientY;
                }

                function stopDrag() {
                    isDragging.value = false;
                }

                return {
                    firstName, lastName, displayName, pronouns, species,
                    verse, occupation, characterGender, characterOrientation, customUrl, slugPreview, 
                    characterBio, avatarPreview, croppedAvatar, bannerPreview,
                    bannerOffsetY, isDragging, dragStartY,
                    onAvatarChange, onBannerChange, startDrag, dragBanner, stopDrag
                };
            }
        }).mount('#characterApp');
    </script>
    <script>
        $(function () {
            const $errorAlert = $('#errorAlert');
            if ($errorAlert.length) {
                setTimeout(() => {
                    $errorAlert.fadeOut('fast');
                }, 5000);

                $('input, textarea, select').one('input', function () {
                    $errorAlert.fadeOut('fast');
                });
            }
        });
    </script>
}